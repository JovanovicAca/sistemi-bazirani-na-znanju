package sbnz.integracija;

import com.example.EuroTraveler.facts.Request
import com.example.EuroTraveler.facts.Response
import com.example.EuroTraveler.facts.Enums.AgeCategory
import com.example.EuroTraveler.facts.Enums.Distance
import com.example.EuroTraveler.facts.Enums.TransportType
import com.example.EuroTraveler.facts.Enums.AccommodationType

import java.time.LocalDate;
import java.time.temporal.ChronoUnit;

global Response response;

rule "Age Category Count Babies"	
    when
        $res: Response ( )
        $req: Request ( $ageCategories : ageCategory)
        Number($brojBeba: intValue >0 && intValue < 5 ) from accumulate(
        Number($value:this, intValue >= 0 && intValue <4) from $ageCategories, count($value))

    then
        modify($res){setAgeCategory(AgeCategory.FAMILY_WITH_BABY)}

end

rule "Age Category Count Kids"	
    when
        $res: Response ( )
        $req: Request ( $ageCategories : ageCategory)
        Number($brojDece: intValue >0 && intValue < 5 ) from accumulate(
        Number($value:this, intValue >= 4 && intValue <12) from $ageCategories, count($value))
    then
        modify($res){setAgeCategory(AgeCategory.FAMILY_WITH_CHILDREN)}

end

rule "Age Category Count Teens"	

    when
        $res: Response ( )
        $req: Request ( $ageCategories : ageCategory)
        Number($brojTinejdzera: intValue >= ($ageCategories.size()/3)*2  ) from accumulate(
        Number($value:this, intValue >= 12 && intValue <20) from $ageCategories, count($value))
    then
        modify($res){setAgeCategory(AgeCategory.TEENAGERS)}
end

rule "Age Category Count Adults"	
    when
        $res: Response ( )
        $req: Request ( $ageCategories : ageCategory)
        Number($brojOdraslih: intValue >= ($ageCategories.size()/3)*2  ) from accumulate(
        Number($value:this, intValue >= 19 && intValue <61) from $ageCategories, count($value))
    then
        modify($res){setAgeCategory(AgeCategory.ADULTS)}
end

rule "Age Category Count Elders"	
    when
        $res: Response ( )
        $req: Request ( $ageCategories : ageCategory)
        Number($brojOdraslih: intValue >= ($ageCategories.size()/3)*2  ) from accumulate(
        Number($value:this, intValue >= 60) from $ageCategories, count($value))
    then
        modify($res){setAgeCategory(AgeCategory.ELDERS)}
end

rule "Kratka destinacija autobusom za penzionere sa malim budzetom"	
	when
		$req: Request($budzet: budget, $ageCategories: ageCategory, $dateFrom: dateFrom, $dateTo: dateTo)
		$res: Response ()
	        Number($brojPenzionera: intValue >= ($ageCategories.size()/3)*2 ) from accumulate(
        	Number($value:this, intValue >= 60) from $ageCategories, count($value))

            not (
                Request(budget/$brojPenzionera >= 300) and Request(ChronoUnit.DAYS.between($dateFrom, $dateTo) >= 7))
    then
		modify($res){ setDistance(Distance.SHORT) }
		modify($res){ setTransportType(TransportType.BUS) }
		modify($res){ setAccommodationType(AccommodationType.HOSTEL)}
		modify($res){ setAgeCategory(AgeCategory.ELDERS)}
end